#######################################
# CentOS7에서 docker 설치
#######################################
https://docs.docker.com/engine/installation/centos/

$ sudo yum update
$ sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

$ sudo yum install docker-engine
$ sudo service docker start
$ sudo chkconfig docker on
$ sudo docker info

#######################################
# Docker 작업 디렉토리를 변경
#######################################
https://docs.docker.com/engine/articles/systemd/

$ mkdir /home/docker

$ cp -R  /var/lib/docker/* /home/docker 

# service file 위치 확인
$ sudo systemctl status docker | grep Loaded

#service file에 아래 내용 추가
EnvironmentFile=-/etc/sysconfig/docker
$OPTIONS  추가

$ sudo vi /etc/sysconfig/docker
OPTIONS="-g /home/docker"

$ sudo reboot



#######################################
## CentOS7에서 docker로 multi-host networking 설정
#######################################

https://docs.docker.com/engine/userguide/networking/get-started-overlay/

######################################
# 사전 작업
# 1. CentOS7에서 kernel을 3.18로 업그레이드

systemctl list-unit-files | grep fire
systemctl list-unit-files | grep iptables

systemctl stop firewalld
systemctl stop iptables
systemctl stop ip6tables

systemctl disable firewalld
systemctl disable iptables
systemctl disable ip6tables

wget http://mirrors.neterra.net/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-3.18.6-1.el7.elrepo.x86_64.rpm
wget http://mirrors.neterra.net/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-3.18.6-1.el7.elrepo.x86_64.rpm

rpm -Uvh kernel-ml-3.18.6-1.el7.elrepo.x86_64.rpm
rpm -Uvh kernel-ml-devel-3.18.6-1.el7.elrepo.x86_64.rpm

vi /boot/grub2/grubenv
saved_entry=CentOS Linux (3.18.6-1.el7.elrepo.x86_64) 7 (Core)  로 변경함.

reboot 

# 커널버전 확인
uname -r 
3.18.6-1.el7.elrepo.x86_64

######################################
# 2. docker-machine 설치
https://docs.docker.com/machine/install-machine/

curl -L https://github.com/docker/machine/releases/download/v0.5.3/docker-machine_linux-amd64 >/usr/local/bin/docker-machine && \
    chmod +x /usr/local/bin/docker-machine

docker-machine version

######################################
# 3.  VirtualBox5 설치
http://www.if-not-true-then-false.com/2010/install-virtualbox-with-yum-on-fedora-centos-red-hat-rhel/

cd /etc/yum.repos.d/
wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
yum update
reboot

rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
yum install gcc 
yum install VirtualBox-5.0

export KERN_DIR=/usr/src/kernels/3.18.6-1.el7.elrepo.x86_64/
/usr/lib/virtualbox/vboxdrv.sh setup

######################################
# 설치
######################################
# Step 1: Set up a key-value store

docker-machine create -d virtualbox mh-keystore

docker $(docker-machine config mh-keystore) run -d \
    -p "8500:8500" \
    -h "consul" \
    progrium/consul -server -bootstrap
	
eval "$(docker-machine env mh-keystore)"

docker ps

######################################
# Step 2: Create a Swarm cluster
docker-machine create \
  -d virtualbox \
  --swarm --swarm-master \
  --swarm-discovery="consul://$(docker-machine ip mh-keystore):8500" \
  --engine-opt="cluster-store=consul://$(docker-machine ip mh-keystore):8500" \
  --engine-opt="cluster-advertise=eth1:2376" \
  mhs-demo0

docker-machine create -d virtualbox \
    --swarm \
    --swarm-discovery="consul://$(docker-machine ip mh-keystore):8500" \
    --engine-opt="cluster-store=consul://$(docker-machine ip mh-keystore):8500" \
    --engine-opt="cluster-advertise=eth1:2376" \
  mhs-demo1

docker-machine ls

######################################
# Step 3: Create the overlay Network

eval $(docker-machine env --swarm mhs-demo0)
docker info

docker network create --driver overlay my-net
docker network ls

eval $(docker-machine env mhs-demo0)
docker network ls

eval $(docker-machine env mhs-demo1)
docker network ls

######################################
# Step 4: Run an application on your Network

eval $(docker-machine env --swarm mhs-demo0)

docker run -itd --name=web --net=my-net --env="constraint:node==mhs-demo0" nginx

docker run -it --rm --net=my-net --env="constraint:node==mhs-demo1" busybox wget -O- http://web

######################################
#Step 5: Check external connectivity

eval $(docker-machine env mhs-demo1)

docker network ls

eval $(docker-machine env mhs-demo0)
docker network ls

docker exec web ip addr


######################################
# Step 6: Extra Credit with Docker Compose

eval $(docker-machine env --swarm mhs-demo0)

vi docker-compose.yml
web:
    image: bfirsh/compose-mongodb-demo
    environment:
        - "MONGO_HOST=counter_mongo_1"
        - "constraint:node==mhs-demo0"
    ports:
        - "80:5000"
mongo:
    image: mongo
	
	
docker-compose --x-networking --project-name=counter up -d

docker-machine ip mhs-demo0
